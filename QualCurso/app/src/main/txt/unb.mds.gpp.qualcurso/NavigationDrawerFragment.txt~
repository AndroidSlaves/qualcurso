Class NavigationDrawerFragment:
	/**
 	  * Fragment used for managing interactions for and 
 	  * presentation of a navigation drawer.
 	  */

**********************************************

VARIABLES

*STATE_SELECTED_POSITION:
    	/**
	  * It's a private static final String variable type.
	  * receive "selected_navigation_drawer_position"
     	  * Used to remember the position of the selected item.
     	  */
    
*PREF_USER_LEARNED_DRAWER:
	/**
     	  * It's a private static final String variable type. Receive  		  * "navigation_drawer_learned". Per the design guidelines, 		  * you should show the drawer on launch until the user 
     	  * manually expands it. This shared preference tracks this.
     	  */

*mCallbacks:
	/**
     	  * It's a private NavigationDrawerCallbacks variable type. A 		  * pointer to the current callbacks instance (the Activity).
          */

*mDrawerToggle:
	/**
     	  * It's a private ActionBarDrawerToggle variable type. Helper 		  * component that ties the action bar to the navigation 	   * drawer.
     	  */

    private DrawerLayout mDrawerLayout;
    private ListView mDrawerListView;
    private View mFragmentContainerView;

    private int mCurrentSelectedPosition = 0;
    private boolean mFromSavedInstanceState;
    private boolean mUserLearnedDrawer;

***************************************************

FUNCTIONS

NavigationDrawerFragment():
	/**
	  * Default constructor 
	  */
    
*onCreate(Bundle savedInstanceState):
	/**
          * Void function type. Set up the screen. Read in the flag  		  * indicating whether or not the user has demonstrated 	  * awareness of the drawer. See PREF_USER_LEARNED_DRAWER for  		  * details. Select either the default item (0) or the last 	      * selected item.
	  */

*onActivityCreated(Bundle savedInstanceState):
	/**
          * Indicate that this fragment would like to influence the  		  * set of actions in the action bar.
          */


*onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState):
	/**
	  * Set up a fragment view and set a list of itens there
	  * about the institutions
	  */
  
*isDrawerOpen(): 
	/**
	  * Public boolean variable type.
          * Used to return mDrawerLayout
	  */ 

*setUp(int fragmentId, DrawerLayout drawerLayout):   
	/**
     	  * Users of this fragment must call this method to set up the 
    	  * navigation drawer interactions.
     	  * @param fragmentId   The android:id of this fragment in its 
     	  * activity's layout.@param drawerLayout The DrawerLayout 		  * containing this fragment's UI.
     	  */

*onDrawerOpened(View drawerView):
	/**
          * The user manually opened the drawer; store this flag to 		  * prevent auto-showing the navigation drawer automatically 	       * in the future.
          * If the user hasn't 'learned' about the drawer, open it to 		  * introduce them to the drawer per the navigation drawer 		  * design guidelines.
	  */
       
 
*selectItem(int position):
	/**
	  * Used to select a item in a certain position
	  */
   
    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        try {
            mCallbacks = (NavigationDrawerCallbacks) activity;
        } catch (ClassCastException e) {
            throw new ClassCastException("Activity must implement NavigationDrawerCallbacks.");
        }
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mCallbacks = null;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(STATE_SELECTED_POSITION, mCurrentSelectedPosition);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {
        super.onConfigurationChanged(newConfig);
        // Forward the new configuration the drawer toggle component.
        mDrawerToggle.onConfigurationChanged(newConfig);
    }

    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        // If the drawer is open, show the global app actions in the action bar. See also
        // showGlobalContextActionBar, which controls the top-left area of the action bar.
        if (mDrawerLayout != null && isDrawerOpen()) {
            inflater.inflate(R.menu.global, menu);
            showGlobalContextActionBar();
        }
        super.onCreateOptionsMenu(menu, inflater);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        if (mDrawerToggle.onOptionsItemSelected(item)) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    /**
     * Per the navigation drawer design guidelines, updates the action bar to show the global app
     * 'context', rather than just what's in the current screen.
     */
    private void showGlobalContextActionBar() {
        ActionBar actionBar = getActionBar();
        actionBar.setDisplayShowTitleEnabled(true);
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_STANDARD);        
        actionBar.setTitle(getFormatedTitle(getString(R.string.app_name)));
    }
    
    public CharSequence getFormatedTitle(CharSequence s){
		int actionBarTitleColor = getResources().getColor(R.color.actionbar_title_color);
		return Html.fromHtml("<font color='#"+Integer.toHexString(actionBarTitleColor).substring(2)+"'><b>"+s+"</b></font>");
	}

    private ActionBar getActionBar() {
        return ((ActionBarActivity) getActivity()).getSupportActionBar();
    }

    
*NavigationDrawerCallbacks:
	/**
     	  * Public static interface. Callbacks interface that all 	    * activities using this fragment must implement.
     	  */
    
*onNavigationDrawerItemSelected(int position):        
	/**
          * Void type. Called when an item in the navigation drawer is 		  * selected.
          */

