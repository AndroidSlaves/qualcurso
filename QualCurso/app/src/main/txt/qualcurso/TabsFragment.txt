Class: TabsFragment
Attributes:
	BeanListCallbacks beanCallbacks // Generic entity that will connect with the database.
	String TAG // Represent the name of the tab object.
	String TAB_INSTITUTIONS // Represent the name "institutions" shown in the tab to the user.
	String TAB_COURSES // Represent the name "courses" shown in the tab to the user.
	View mRoot // 
	TabHost mTabHost
	int mCurrentTab
	SearchView mSearchView
	ArrayList<Course> allCourses // List of all courses to be listed when clicking the tabs.
	ArrayList<Institution> allInstitutions /* List of all courses to be listed when clicking
											 the tabs.*/ 
Methods:
	onAttach(Activity activity) 
		// Catches the exceptions possible from the BenListCallBacks. 
	
	onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) 
		// Inflates the fragments with the tabs. 	

	onActivityCreated(Bundle savedInstanceState) 
		super.onActivityCreated(savedInstanceState);
		setRetainInstance(true);
		setHasOptionsMenu(true);
		mTabHost.setOnTabChangedListener(this);
		mTabHost.setCurrentTab(mCurrentTab);
		// manually start loading stuff in the first tab
		updateTab(TAB_INSTITUTIONS, R.id.tab_1);
	

	  setupTabs() 
		mTabHost.setup(); // you must call this before adding your tabs!
		mTabHost.addTab(mTabHost.newTabSpec(TAB_INSTITUTIONS).setIndicator(getString(R.string.institutions)).setContent(R.id.tab_1));
		mTabHost.addTab(mTabHost.newTabSpec(TAB_COURSES).setIndicator(getString(R.string.courses)).setContent(R.id.tab_2));
		TabWidget widget = mTabHost.getTabWidget();
		for(int i = 0; i < widget.getChildCount(); i++)
			View v = widget.getChildAt(i);
			TextView tv = (TextView) v.findViewById(android.R.id.title);
			if(tv==null)
				continue;
			
			v.setBackgroundResource(R.drawable.tab_indicator_ab_light_green_acb);
		
	

	
	  onTabChanged(String tabId) 
		if (TAB_INSTITUTIONS.equals(tabId)) 
			updateTab(tabId, R.id.tab_1);
			mCurrentTab = 0;
			return;
		
		if (TAB_COURSES.equals(tabId)) 
			updateTab(tabId, R.id.tab_2);
			mCurrentTab = 1;
			return;
		
	
	
	
	  onCreateOptionsMenu(Menu menu, MenuInflater inflater) 
		inflater.inflate(R.menu.search_menu, menu);
		MenuItem searchItem = menu.findItem(R.id.action_search);
		mSearchView = (SearchView) MenuItemCompat.getActionView(searchItem);
		setupSearchView(searchItem);
		super.onCreateOptionsMenu(menu, inflater);
	
	
	  setupSearchView(MenuItem searchItem)
		searchItem.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_IF_ROOM|MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
		mSearchView.setOnQueryTextListener(this);
	

	  updateTab(String tabId, int placeholder) 
		FragmentManager fm = getFragmentManager();
		if (fm.findFragmentByTag(tabId) == null) 
			if(tabId.equalsIgnoreCase(TAB_INSTITUTIONS))
				beanCallbacks.onBeanListItemSelected(InstitutionListFragment.newInstance(0,2010), placeholder);
			else if (tabId.equalsIgnoreCase(TAB_COURSES))
				beanCallbacks.onBeanListItemSelected(CourseListFragment.newInstance(0,2010), placeholder);
			
		
	

	
	 boolean onQueryTextChange(String arg0) 
		if(arg0.length()>=1)
			if(mCurrentTab == 0)
				ArrayList<Bean> beans = getFilteredList(arg0, allInstitutions);
				beanCallbacks.onBeanListItemSelected(InstitutionListFragment.newInstance(0, 2010, castToInstitutions(beans)), R.id.tab_1);
			else if (mCurrentTab == 1)
				ArrayList<Bean> beans = getFilteredList(arg0, allCourses);
				beanCallbacks.onBeanListItemSelected(CourseListFragment.newInstance(0, 2010, castToCourses(beans)), R.id.tab_2);
			
		else
			if(mCurrentTab == 0)
				beanCallbacks.onBeanListItemSelected(InstitutionListFragment.newInstance(0, 2010), R.id.tab_1);
			else if (mCurrentTab == 1)
				beanCallbacks.onBeanListItemSelected(CourseListFragment.newInstance(0, 2010), R.id.tab_2);
			
		
		return false;
	
	
	 ArrayList<Institution> castToInstitutions(ArrayList<Bean> beans)
		ArrayList<Institution> institutions = new ArrayList<Institution>();
		for(Bean b : beans)
			institutions.add((Institution)b);
		
		return institutions;
	
	
	 ArrayList<Course> castToCourses(ArrayList<Bean> beans)
		ArrayList<Course> courses = new ArrayList<Course>();
		for(Bean b : beans)
			courses.add((Course)b);
		
		return courses;
	
	
	 ArrayList<Bean> getFilteredList(String filter, ArrayList<? extends Bean> list)
		ArrayList<Bean> beans = new ArrayList<Bean>();
		for(Bean b : list)
			if(b.toString().toLowerCase().startsWith(filter.toLowerCase()))
				beans.add(b);
			
		
		return beans;
	

	
	 boolean onQueryTextSubmit(String arg0) 
		return false;
	


