Class: Institution
	// Class that representates an institution entity with its attributes.
Attributes:
	 int id
	 	// Unic number that identifies the institution.
	 String acronym
	 	//
Methods:
	 Institution() 
		// Method contructor that instantiate the object with its default attributes.

	 Institution(int id)
	 	// Method contructor that instantiate the object with the given id attribute.


	 getAcronym()
	 	// Method that gets and returns the institution acronym.

	 void setAcronym(String acronym) 
	 	// Method that sets the institution acronym attribute.

	 void setId(int id)
	 	// Method that sets the institution id with a given value.

	 int getId() {
		return id
	}

	 boolean save() throws SQLException {
		boolean result = false
		GenericBeanDAO gDB = new GenericBeanDAO()
		result = gDB.insertBean(this)
		this.setId(Institution.last().getId())
		return result
	}
	
	 boolean addCourse(Course course) throws SQLException {
		boolean result = false
		GenericBeanDAO gDB = new GenericBeanDAO()
		result = gDB.addBeanRelationship(this, course)
		return result
	}

	 static Institution get(int id) throws SQLException {
		Institution result = new Institution(id)
		GenericBeanDAO gDB = new GenericBeanDAO()
		result = (Institution) gDB.selectBean(result)
		return result
	}

	 static ArrayList<Institution> getAll() throws SQLException {
		Institution type = new Institution()
		ArrayList<Institution> result = new ArrayList<Institution>()
		GenericBeanDAO gDB = new GenericBeanDAO()
		for (Bean b : gDB.selectAllBeans(type,"acronym")) {
			result.add((Institution) b)
		}
		return result
	}

	 static int count() throws SQLException {
		Institution type = new Institution()
		GenericBeanDAO gDB = new GenericBeanDAO()
		return gDB.countBean(type)
	}

	 static Institution first() throws SQLException {
		Institution result = new Institution()
		GenericBeanDAO gDB = new GenericBeanDAO()
		result = (Institution) gDB.firstOrLastBean(result, false)
		return result
	}

	 static Institution last() throws 
			SQLException {
		Institution result = new Institution()
		GenericBeanDAO gDB = new GenericBeanDAO()
		result = (Institution) gDB.firstOrLastBean(result, true)
		return result
	}

	 ArrayList<Course> getCourses() throws 
			SQLException {
		ArrayList<Course> courses = new ArrayList<Course>()
		GenericBeanDAO gDB = new GenericBeanDAO()
		for (Bean b : gDB.selectBeanRelationship(this, "course","name")) {
			courses.add((Course) b)
		}
		return courses
	}
	
	 ArrayList<Course> getCourses(int year) throws 
			SQLException {
		ArrayList<Course> courses = new ArrayList<Course>()
		GenericBeanDAO gDB = new GenericBeanDAO()
		for (Bean b : gDB.selectBeanRelationship(this, "course", year,"name")) {
			courses.add((Course) b)
		}
		return courses
	}
	
	

	 static ArrayList<Institution> getWhere(String field, String value,
			boolean like) throws  SQLException {
		Institution type = new Institution()
		ArrayList<Institution> result = new ArrayList<Institution>()
		GenericBeanDAO gDB = new GenericBeanDAO()
		for (Bean b : gDB.selectBeanWhere(type, field, value, like,"acronym")) {
			result.add((Institution) b)
		}
		return result
	}

	 static ArrayList<Institution> getInstitutionsByEvaluationFilter(Search search) throws  SQLException {
		ArrayList<Institution> result = new ArrayList<Institution>()
		String sql = "SELECT i.* FROM institution AS i, evaluation AS e, articles AS a, books AS b "+
					" WHERE year="+Integer.toString(search.getYear())+
					" AND e.id_institution = i._id"+
					" AND e.id_articles = a._id"+
					" AND e.id_books = b._id"+
					" AND "+search.getIndicator().getValue()

		if(search.getMaxValue() == -1){
			sql+=" >= "+Integer.toString(search.getMinValue())
		}else{
			sql+=" BETWEEN "+Integer.toString(search.getMinValue())+" AND "+Integer.toString(search.getMaxValue())
		}
		sql+=" GROUP BY i._id"
		GenericBeanDAO
		gDB = new GenericBeanDAO()

		for (Bean b : gDB.runSql(new Institution(), sql)){
			result.add((Institution)b)
		}

		return result
	}

	 static ArrayList<Course> getCoursesByEvaluationFilter(int id_institution, Search search) throws  SQLException {
		ArrayList<Course> result = new ArrayList<Course>()
		String sql = "SELECT c.* FROM course AS c, evaluation AS e, articles AS a, books AS b "+
					" WHERE e.id_institution="+id_institution+
					" AND e.id_course = c._id"+
					" AND e.id_articles = a._id"+
					" AND e.id_books = b._id"+
					" AND year="+search.getYear()+
					" AND "+search.getIndicator().getValue()
		
		if(search.getMaxValue() == -1){
			sql+=" >= "+search.getMinValue()
		}else{
			sql+=" BETWEEN "+search.getMinValue()+" AND "+search.getMaxValue()
		}
		sql+=" GROUP BY c._id"
		GenericBeanDAO gDB = new GenericBeanDAO()

		for (Bean b : gDB.runSql(new Course(), sql)){
			result.add((Course)b)
		}
		return result
	}
	
	 boolean delete() throws  SQLException {
		boolean result = false
		GenericBeanDAO gDB = new GenericBeanDAO()
		for(Course c : this.getCourses()){
			gDB.deleteBeanRelationship(this,c)
		}
		result = gDB.deleteBean(this)
		return result
	}

	@Override
	 String get(String field) {
		if (field.equals("_id")) {
			return Integer.toString(this.getId())
		} else if (field.equals("acronym")) {
			return this.getAcronym()
		} else {
			return ""
		}
	}

	@Override
	 void set(String field, String data) {
		if (field.equals("_id")) {
			this.setId(Integer.parseInt(data))
		} else if (field.equals("acronym")) {
			this.setAcronym(data)
		} else {

		}

	}

	@Override
	 ArrayList<String> fieldsList() {
		ArrayList<String> fields = new ArrayList<String>()
		fields.add("_id")
		fields.add("acronym")
		return fields
	}

	@Override
	 String toString() {
		return getAcronym()
	}
	
	 Institution(Parcel in){
		this.id = in.readInt()
		this.acronym = in.readString()
		this.identifier = in.readString()
		this.relationship = in.readString()
	}

	@Override
	 int describeContents() {
		// TODO Auto-generated method stub
		return 0
	}

	@Override
	 void writeToParcel(Parcel dest, int flags) {
		dest.writeInt(this.id)
		dest.writeString(this.acronym)
		dest.writeString(this.identifier)
		dest.writeString(this.relationship)
		
	}
	
	 static final Parcelable.Creator<Institution> CREATOR = new Parcelable.Creator<Institution>() {

		@Override
		 Institution createFromParcel(Parcel source) {
			return new Institution(source)
		}

		@Override
		 Institution[] newArray(int size) {
			// TODO Auto-generated method stub
			return new Institution[size]
		}
	}
	
